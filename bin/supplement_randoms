#!/usr/bin/env python

import os, sys
import numpy as np
from time import time
start = time()

from desitarget import io
from desitarget.randoms import supplement_randoms
import fitsio

#import warnings
#warnings.simplefilter('error')

import multiprocessing
nproc = multiprocessing.cpu_count() // 2

from desiutil.log import get_logger
log = get_logger()

from argparse import ArgumentParser
ap = ArgumentParser(description='Make a random catalog with "zeros" for pixel-level quantities in missing (i.e. outside-of-the-footprint) bricks')
ap.add_argument("randomcat",
                help='An existing "inside-of-the-footprint" random catalog. Must contain at least the column "BRICKNAME" and the header card "SEED" (e.g /project/projectdirs/desi/target/catalogs/randoms-dr4-0.20.0.fits). If SEED does not exist in the header, the seed defaults to 1 in desitarget.randoms.supplement_randoms()"')
ap.add_argument("dest",
                help="Output directory for random catalog (the file name is built on-the-fly from other inputs)")
ap.add_argument("--density", type=int,
                help='Number of points per sq. deg. to generate (defaults to 10,000)',
                default="10000")
ap.add_argument("--numproc", type=int,
                help='number of concurrent processes to use [{}]'.format(nproc),
                default=nproc)
ap.add_argument("--dustdir",
                help="Directory of SFD dust maps (defaults to the equivalent of $DUST_DIR+'/maps')",
                default=None)

ns = ap.parse_args()

if not os.path.exists(ns.randomcat):
    log.critical('Input directory does not exist: {}'.format(ns.randomcat))
    sys.exit(1)

log.info('running on {} processors...t = {:.1f}s'.format(ns.numproc, time()-start))

# ADM just the filename for the input random catalog.
rancatfn = os.path.basename(ns.randomcat)

# ADM find the bricknames covered by the existing random catalog.
donebns = fitsio.read(ns.randomcat, columns="BRICKNAME")

# ADM determine the seed used for the existing random catalog.
try:
    seed = fitsio.read_header(ns.randomcat, "RANDOMS")["SEED"]
except KeyError:
    seed = 1

# ADM make the array of "zerod" bricks.
randoms = supplement_randoms(donebns, density=ns.density, numproc=ns.numproc,
                             dustdir=ns.dustdir, seed=seed)

# ADM write out the supplemental random catalog.
nrands, outfile = io.write_randoms(ns.dest, randoms, indir=ns.randomcat,
                                   supp=True, density=ns.density, seed=seed)

log.info('wrote file of {} randoms to {}...t = {:.1f}s'
         .format(nrands, outfile, time()-start))
