#!/usr/bin/env python

from __future__ import print_function, division

import os, sys
import numpy as np

from desitarget.imagefootprint import pixweight

#import warnings
#warnings.simplefilter('error')

import multiprocessing
nproc = multiprocessing.cpu_count() // 2

from desiutil.log import get_logger
log = get_logger()

from argparse import ArgumentParser
ap = ArgumentParser()
ap.add_argument("surveydir", 
                help='Legacy Surveys Data Release root directory (e.g. /global/project/projectdirs/cosmo/data/legacysurvey/dr4/ for DR4 at NERSC)')
ap.add_argument("dest", 
                help='Output file name to write map of HEALPixel weights in the NESTED scheme (e.g. /project/projectdirs/desi/target/catalogs/pixweight-dr4-0.20.0.fits)')
ap.add_argument("--density", type=int,
                help='Number of points per sq. deg. at which to Monte Carlo the imaging masks (defaults to 10000)',
                default="10000")
ap.add_argument("--numproc", type=int,
                help='number of concurrent processes to use [{}]'.format(nproc),
                default=nproc)
ap.add_argument('--nside', type=int,
                help='Process random points in bricks that have centers in HEALPixels at this resolution (defaults to 4)',
                default=4)
ap.add_argument('--healpixels',
                help='HEALPixels (corresponding to nside) to process (e.g. "6,21,57"). If not passed, run all bricks in the Data Release',
                default=None)
ap.add_argument("--bundlebricks", type=int,
                help="(overrides all options but surveydir) Print a slurm script to parallelize, with about this many bricks per HEALPixel (e.g. 10000)",

ns = ap.parse_args()

if not os.path.exists(ns.src):
    log.critical('Input directory does not exist: {}'.format(ns.src))
    sys.exit(1)

log.info('running on {} processors'.format(ns.numproc))

randoms = select_randoms(density=ns.density, numproc=ns.numproc, nside=ns.nside, drdir=ns.src)

log.info('wrote map of HEALPixel weights (in the nested scheme) to {}'.format(ns.dest))


    #ADM write out results, if requested
if outfile is not None:
                log.info('Writing pixel map to {}'.format(outfile))
        #ADM write information indicating HEALPix setup to file header
        #ADM include desitarget version as a check in case something changes
        import fitsio
        from desiutil import depend
        from . import __version__ as desitarget_version
        hdr = fitsio.FITSHDR()
        depend.setdep(hdr, 'desitarget', desitarget_version)
        hdr['DENSITY'] = density
        hdr['HPXNSIDE'] = nside
        hdr['HPXNEST'] = True
        fitsio.write(outfile, pix_weight, extname='PIXWEIGHTS', header=hdr, clobber=True)

    log.info('Done...t={:.1f}s'.format(time()-start))


