#!/usr/bin/env python

from __future__ import print_function, division
import numpy as np

import desitarget
import desitarget.targets
import desitarget.io as dtio
import desitarget.mock as dtmock
from desitarget import desi_mask
import argparse 
import desispec.brick
import os
from astropy.table import Table, Column


parser = argparse.ArgumentParser(description="Create mock target file from dark matter only mocks")
parser.add_argument("--output_dir", "-O", help="Path to write the outputs (targets,truth)", type=str, default="./")
parser.add_argument("--mock_qso_file", "-Q", help="Mock lightcone QSO file", type=str, required=True)
parser.add_argument("--mock_elg_file","-E", help="Mock lightcone ELG file", type=str, required=True)
parser.add_argument("--mock_lrg_file","-L", help="Mock lightcone LRG file", type=str, required=True)
parser.add_argument("--mock_random_file","-R", help="Mock lightcone random file", type=str, required=True)
parser.add_argument("--qsoI_dens","-q1",help="QSOI (Lya) number density (n per deg^2). Default 120.", type=float, default=120.0)
parser.add_argument("--qsoII_dens","-q2",help="QSOII (tracer) number density (n per deg^2). Default 50.", type=float, default=50.0)
parser.add_argument("--qso_fake_dens","-qf",help="Fake QSO number density (n per deg^2). Default 90.", type=float, default=90.0)
parser.add_argument("--lrg_dens","-l",help="LRG number density (n per deg^2). Default 300.", type=float, default=300.0)
parser.add_argument("--lrg_fake_dens","-lf",help="Fake LRG number density (n per deg^2). Default 50.", type=float, default=50.0)
parser.add_argument("--elg_dens","-e",help="ELG number density (n per deg^2). Default 2400.", type=float, default=2400.0)
parser.add_argument("--verbose", "-v", action='store_true')
args = parser.parse_args()

qso_mock_ra, qso_mock_dec, qso_mock_z = dtio.read_mock_dark_time(args.mock_qso_file)
elg_mock_ra, elg_mock_dec, elg_mock_z = dtio.read_mock_dark_time(args.mock_elg_file)
lrg_mock_ra, lrg_mock_dec, lrg_mock_z = dtio.read_mock_dark_time(args.mock_lrg_file)
random_mock_ra, random_mock_dec, random_mock_z = dtio.read_mock_dark_time(args.mock_random_file, read_z=False)

goal_density_qsoI = args.qsoI_dens
goal_density_qsoII = args.qsoII_dens
goal_density_qso_fake = args.qso_fake_dens
goal_density_lrg = args.lrg_dens
goal_density_lrg_fake = args.lrg_fake_dens
goal_density_elg = args.elg_dens

ra_list = [qso_mock_ra, qso_mock_ra, random_mock_ra, lrg_mock_ra, random_mock_ra, elg_mock_ra]
dec_list = [qso_mock_dec, qso_mock_dec, random_mock_dec, lrg_mock_dec, random_mock_dec, elg_mock_dec]
z_list = [qso_mock_z, qso_mock_z, random_mock_z, lrg_mock_z, random_mock_z, elg_mock_z]
min_z_list  = [2.1, -1.0, -1.0, -1.0, -1.0, -1.0]
max_z_list  = [1000.0, 2.1, 1000.0, 1000.0, 1000.0, 1000.0]
goal_list = [goal_density_qsoI, goal_density_qsoII, goal_density_qso_fake, goal_density_lrg, goal_density_lrg_fake, goal_density_elg]
true_type_list = ['QSO', 'QSO', 'STAR', 'GALAXY', 'UNKNOWN', 'GALAXY']
desi_tf_list = [desi_mask.QSO, desi_mask.QSO, desi_mask.QSO, desi_mask.LRG, desi_mask.LRG, desi_mask.ELG]
bgs_tf_list = [0,0,0,0,0,0]
mws_tf_list = [0,0,0,0,0,0]

ra_total = np.empty(0)
dec_total = np.empty(0)
z_total = np.empty(0)
desi_target_total = np.empty(0, dtype='i8')
bgs_target_total = np.empty(0, dtype='i8')
mws_target_total = np.empty(0, dtype='i8')
true_type_total = np.empty(0, dtype='S10')

for ra, dec, z, min_z, max_z, goal, true_type, desi_tf, bgs_tf, mws_tf in\
        zip(ra_list, dec_list, z_list, min_z_list, max_z_list, goal_list,\
                true_type_list, desi_tf_list, bgs_tf_list, mws_tf_list):

    ra_, dec_, z_ ,desi_flag_, bgs_flag_, mws_flag_, true_type_ = \
        dtmock.select_population(ra, dec, z, min_z=min_z, max_z=max_z, goal_density=goal,\
        true_type=true_type, desi_target_flag = desi_tf, bgs_target_flag = bgs_tf, mws_target_flag = mws_tf)

    ra_total = np.append(ra_total, ra_)
    dec_total = np.append(dec_total, dec_)
    z_total = np.append(z_total, z_)
    desi_target_total = np.append(desi_target_total, desi_flag_)
    bgs_target_total = np.append(bgs_target_total, bgs_flag_)
    mws_target_total = np.append(mws_target_total, mws_flag_)
    true_type_total = np.append(true_type_total, true_type_)

n = len(ra_total)
targetid = np.random.randint(2**62, size=n)
subprior = np.random.uniform(0., 1., size=n)
brickname = desispec.brick.brickname(ra_total, dec_total)

print('Total in targetid {}'.format(len(targetid)))
print('Total in ra {}'.format(len(ra_total)))
print('Total in dec {}'.format(len(dec_total)))
print('Total in brickname {}'.format(len(brickname)))
print('Total in desi {}'.format(len(desi_target_total)))
print('Total in bgs {}'.format(len(bgs_target_total)))
print('Total in mws {}'.format(len(mws_target_total)))


targets_filename = os.path.join(args.output_dir, 'targets.fits')
targets = Table()
targets['TARGETID'] = targetid
targets['BRICKNAME'] = brickname
targets['RA'] = ra_total
targets['DEC'] = dec_total
targets['DESI_TARGET'] = desi_target_total
targets['BGS_TARGET'] = bgs_target_total
targets['MWS_TARGET'] = mws_target_total
targets['SUBPRIORITY'] = subprior
targets.write(targets_filename, overwrite=True)

truth_filename  = os.path.join(args.output_dir, 'truth.fits')
truth = Table()
truth['TARGETID'] = targetid
truth['BRICKNAME'] = brickname
truth['RA'] = ra_total
truth['DEC'] = dec_total
truth['TRUEZ'] = z_total
truth['TRUETYPE'] = true_type_total
truth.write(truth_filename, overwrite=True)

