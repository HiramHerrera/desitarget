#!/usr/bin/env python

from __future__ import print_function, division

import os, sys
import numpy as np
import fitsio

from desitarget import io
from desitarget.io import desitarget_version
from desitarget.cuts import select_targets, check_input_files, qso_selection_options, Method_sandbox_options
from desitarget.brightmask import mask_targets
from desitarget.QA import _parse_tcnames
from desitarget.targets import decode_targetid

from time import time
start = time()

#import warnings
#warnings.simplefilter('error')

import multiprocessing
nproc = multiprocessing.cpu_count() // 2
# ADM don't confuse this with the ns.nside input that is parsed below!!!
nside = io.desitarget_nside()

from desiutil.log import get_logger
log = get_logger()

from argparse import ArgumentParser
ap = ArgumentParser(description='Generates DESI target bits from Legacy Surveys sweeps or tractor files')
ap.add_argument("sweepdir",
                help="Tractor/sweeps file or root directory with tractor/sweeps files")
ap.add_argument("dest",
                help="Output target selection file")
ap.add_argument('-s2', "--sweepdir2",
                help='Additional Tractor/sweeps file or directory (useful for combining, e.g., DR8 into one file of targets)',
                default=None)
ap.add_argument('-c', "--check", action='store_true',
                help="Process tractor/sweeps files to check for corruption, without running full target selection")
ap.add_argument('-m', "--mask",
                help="If sent then mask the targets, the name of the mask file should be supplied")
ap.add_argument("--sandbox", action='store_true',
                help="Apply the sandbox target selection algorithms")
ap.add_argument("--FoMthresh", type=float,
                help='XD Figure of Merit Threshold for an ELG (sandbox)')
ap.add_argument('--qsoselection', choices=qso_selection_options, default='randomforest',
                help="QSO target selection method")
ap.add_argument('--Method' ,choices=Method_sandbox_options, default='XD',
                help="Method used in sandbox target for ELG")
ap.add_argument("--gaiamatch", action='store_true',
                help="DO match to Gaia DR2 chunks files in order to populate Gaia columns for MWS/STD selection")
ap.add_argument("--numproc", type=int,
                help='number of concurrent processes to use [defaults to {}]'.format(nproc),
                default=nproc)
ap.add_argument('-t','--tcnames', default=None,
                help="Comma-separated names of target classes to run (e.g. QSO,LRG). Options are ELG, QSO, LRG, MWS, BGS, STD. Default is to run everything)")
ap.add_argument('--nside', type=int,
                help="Process targets in HEALPixels at this resolution (defaults to None). See also the 'healpixels' input flag",
                default=None)
ap.add_argument('--healpixels',
                help="HEALPixels corresponding to `nside` (e.g. '6,21,57'). Only process files that touch these pixels and return targets within these pixels",
                default=None)
ap.add_argument("--bundlefiles", type=int,
                help="(overrides all options but `src`) print slurm script to parallelize, with about this many sweeps files touching each HEALPixel (e.g. 100)",
                default=None)
ap.add_argument("--filespersec", type=float,
                help="estimate of sweeps files completed per second by the (parallelized) code. Used with `bundlefiles` to guess run times (defaults to 0.12)",
                default=0.12)
ap.add_argument('--radecbox',
                help="Only return targets in an RA/Dec box denoted by 'RAmin,RAmax,Decmin,Decmax' in degrees (e.g. '140,150,-10,-20')",
                default=None)
ap.add_argument('--radecrad',
                help="Only return targets in an RA/Dec circle/cap denoted by 'centerRA,centerDec,radius' in degrees (e.g. '140,150,0.5')",
                default=None)
ap.add_argument("--noresolve", action='store_true',
                help="Do NOT resolve into northern targets in northern regions and southern targets in southern regions")
ap.add_argument("--nomaskbits", action='store_true',
                help="Do NOT apply information in MASKBITS column to target classes")
ap.add_argument("--writeall", action='store_true',
                help="Default behavior is to split targets by bright/dark-time surveys. Send this to ALSO write a file of ALL targets")
ap.add_argument("--nosecondary", action='store_true',
                help="Do NOT create TARGETID look-up files for secondary targets in $SCNDIR/outdata/priminfo-drversion-desitargetversion/$dest.fits (where $dest is the basename of dest)")
ap.add_argument("--scnddir",
                help="Base directory of secondary target files (e.g. '/project/projectdirs/desi/target/secondary' at NERSC). "+
                "Defaults to SCND_DIR environment variable. Not needed if --nosecondary is sent.")
ap.add_argument("--nobackup", action='store_true',
                help="Do NOT run the Gaia-only backup targets (which require the GAIA_DIR environment variable to be set).")

ns = ap.parse_args()
# ADM build the list of command line arguments as
# ADM bundlefiles potentially needs to know about them.
extra = " --numproc {}".format(ns.numproc)
nsdict = vars(ns)
for nskey in "noresolve", "nomaskbits", "writeall":
    if nsdict[nskey]:
        extra += " --{}".format(nskey)

infiles = io.list_sweepfiles(ns.sweepdir)
if ns.sweepdir2 is not None:
    infiles2 = io.list_sweepfiles(ns.sweepdir2)
    infiles += infiles2
if len(infiles) == 0:
    infiles = io.list_tractorfiles(ns.sweepdir)
    if ns.sweepdir2 is not None:
        infiles2 = io.list_tractorfiles(ns.sweepdir2)
        infiles += infiles2
if len(infiles) == 0:
    log.critical('no sweep or tractor files found')
    sys.exit(1)

# ADM Only coded for objects with Gaia matches
# ADM (e.g. DR6 or above). Fail for earlier Data Releases.
# ADM Guard against a single file being passed.
fn = infiles
if ~isinstance(infiles, str):
    fn = infiles[0]
data = fitsio.read(fn, columns=["RELEASE","PMRA"], upper=True)
if np.any(data["RELEASE"] < 6000):
    log.critical('SV cuts only coded for DR6 or above')
    raise ValueError
if (np.max(data['PMRA']) == 0.) & np.any(data["RELEASE"] < 7000):
    d = "/project/projectdirs/desi/target/gaia_dr2_match_dr6"
    log.info("Zero objects have a proper motion.")
    log.critical(
        "Did you mean to send the Gaia-matched sweeps in, e.g., {}?"
        .format(d)
    )
    raise IOError

if ns.bundlefiles is None:
    log.info("running on {} processors".format(ns.numproc))

# ADM parse the list of HEALPixels in which to run.
pixlist = ns.healpixels
if pixlist is not None:
    pixlist = [int(pix) for pix in pixlist.split(',')]

# ADM parse the list of RA/Dec regions in which to run.
inlists = [ns.radecbox, ns.radecrad]
for i, inlist in enumerate(inlists):
    if inlist is not None:
        inlists[i] = [float(num) for num in inlist.split(',')]

# ADM limit to specific bit names, if passed, otherwise run all targets.
tcnames = _parse_tcnames(tcstring=ns.tcnames, add_all=False)

if ns.check:
    log.info('Check input files...')
    nbadfiles = check_input_files(infiles, numproc=ns.numproc)
    log.info('{} potentially corrupt files'.format(nbadfiles))
else:
    targets = select_targets(infiles, numproc=ns.numproc,
                             qso_selection=ns.qsoselection, gaiamatch=ns.gaiamatch,
                             sandbox=ns.sandbox, FoMthresh=ns.FoMthresh, Method=ns.Method,
                             nside=ns.nside, pixlist=pixlist, extra=extra,
                             bundlefiles=ns.bundlefiles, filespersec=ns.filespersec,
                             radecbox=inlists[0], radecrad=inlists[1],
                             tcnames=tcnames, survey='main', backup=not(ns.nobackup),
                             resolvetargs=not(ns.noresolve), mask=not(ns.nomaskbits)
    )
    if ns.bundlefiles is None:
        # ADM only run secondary functions if --nosecondary was not passed.
        scndout = None
        if not ns.nosecondary and len(targets) > 0:
            from desitarget.secondary import _get_scxdir, match_secondary
            # ADM read secondary target directory.
            scxdir = _get_scxdir(ns.scnddir)
            # ADM construct a label for the secondary file for TARGETID look-ups.
            # ADM use RELEASE to determine the release string for the targets.
            drint = np.max(targets['RELEASE']//1000)
            scndoutdn = "priminfo-dr{}-{}".format(drint, desitarget_version)
            scndoutdn = os.path.join(scxdir, "outdata", scndoutdn)
            if not os.path.exists(scndoutdn):
                log.info("making directory...{}".format(scndoutdn))
                os.makedirs(scndoutdn)
            scndoutfn = "{}.fits".format(os.path.splitext(os.path.basename(ns.dest))[0])
            # ADM construct the output directory for primary match info.
            scndout = os.path.join(scndoutdn, scndoutfn)
            targets = match_secondary(targets, scxdir, scndout, sep=1.,
                                      pix=pixlist, nside=ns.nside)

        if ns.mask:
            targets = mask_targets(targets, inmaskfile=ns.mask, nside=nside)

        # ADM differentiate the Gaia-only and Legacy Surveys targets.
        _, _, _, _, _, gaiadr = decode_targetid(targets["TARGETID"])
        isgaia = gaiadr > 0
        # ADM create gaia-only directory name, make it if it doesn't exist.
        gaiadir = os.path.join(os.path.dirname(ns.dest), "supp-targets")
        if not os.path.exists(gaiadir):
            os.makedirs(gaiadir)
        gaiadest = os.path.join(gaiadir, os.path.basename(ns.dest))
        # ADM write out bright-time and dark-time targets separately,
        # ADM together with the Gaia-only back-up objects.
        obscons = ["BRIGHT", "DARK", None]
        iis = [~isgaia, ~isgaia, isgaia]
        dests = [ns.dest, ns.dest, gaiadest]
        if ns.writeall:
            obscons.append(None)
            iis.append(~isgaia)
            dests.append(ns.dest)
        for obscon, ii, dest in zip(obscons, iis, dests):
            ntargs, outfile = io.write_targets(
                dest, targets[ii], resolve=not(ns.noresolve), maskbits=not(ns.nomaskbits),
                indir=ns.sweepdir, indir2=ns.sweepdir2, obscon=obscon, scndout=scndout,
                survey="main", nsidefile=ns.nside, hpxlist=pixlist,
                qso_selection=ns.qsoselection, sandboxcuts=ns.sandbox, nside=nside
            )
            log.info('{} targets written to {}...t={:.1f}s'.format(ntargs, outfile, time()-start))
