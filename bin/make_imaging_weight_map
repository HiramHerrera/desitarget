#!/usr/bin/env python

from __future__ import print_function, division

import os, sys
import numpy as np
import fitsio
from time import time
start = time()

from desitarget.randoms import pixweight

#import warnings
#warnings.simplefilter('error')

import multiprocessing
nproc = multiprocessing.cpu_count() // 2

from desiutil.log import get_logger
log = get_logger()

from argparse import ArgumentParser
ap = ArgumentParser("Generate a map of HEALPixels weighted by areas with 1 or more observations for a Data Release of the Legacy Surveys")
ap.add_argument("src", 
                help='File of random points generated by, e.g., select_randoms')
ap.add_argument("dest", 
                help='Output file name to write map of HEALPixel weights in the NESTED scheme (e.g. /project/projectdirs/desi/target/catalogs/pixweight-dr4-0.20.0.fits)')
ap.add_argument("--nside", type=int, 
                help='The resolution (HEALPixel nside number) at which to build the map (defaults to 256)',
                default="256")
ap.add_argument("--outplot",
                help='Output file name to which to write a plot of the map',
                default=None)

ns = ap.parse_args()

if not os.path.exists(ns.src):
    log.critical('Input directory does not exist: {}'.format(ns.src))
    sys.exit(1)

hdr = fitsio.read_header(ns.src,"RANDOMS")
pixmap = pixweight(ns.src, nside=ns.nside, outplot=ns.outplot, density=hdr["DENSITY"])

#ADM write out the map
log.info('Writing pixel map to {}'.format(ns.dest))

fitsio.write(ns.dest, pixmap, extname='PIXWEIGHTS', header=hdr, clobber=True)
log.info('wrote map of HEALPixel weights (in the nested scheme) to {}'.format(ns.dest))
log.info('Done...t={:.1f}s'.format(time()-start))
