#!/usr/bin/env python

from __future__ import print_function, division

import os
import sys
import argparse

import yaml
import healpy as hp

from desitarget.mock.build import targets_truth
from desispec.log import get_logger, DEBUG
from desimodel.footprint import tiles2pix
import desimodel.io

import multiprocessing
nproc = multiprocessing.cpu_count() // 2

parser = argparse.ArgumentParser()
parser.add_argument('--config', '-c',default='input.yaml')
parser.add_argument('--output_dir', '-O', help='Path to write the outputs', type=str, default='./')
parser.add_argument('--realtargets', '-r', help='Path to real target catalog', type=str)
parser.add_argument('--seed', '-s', help='Seed for random number generation', type=int, default=None)
parser.add_argument('--bricksize', '-b', help='Size of the imaging bricks (deg)',
                    type=float, default=0.25)

parser.add_argument('--healpixels', help='Integer list of healpix pixels (corresponding to nside) to process.', type=int, nargs='*', default=None)
parser.add_argument('--nside', help='Divide the DESI footprint into this healpix resolution', type=int, default=8)
parser.add_argument('--nside_outfiles', help='Group output files with this healpix resolution', type=int, default=64)

parser.add_argument('--nproc', type=int, help='number of concurrent processes to use [{}]'.format(nproc), default=nproc)

parser.add_argument('--join', action='store_true', help='Join the target and truth files in output_dir.')
parser.add_argument('--qa', action='store_true', help='Generate QA plots from the joined target and truth files in output_dir.')
parser.add_argument('--clobber', action='store_true', help='Remove intermediate files.')
parser.add_argument('-v','--verbose', action='store_true', help='Enable verbose output.')
args = parser.parse_args()

if args.verbose:
    log = get_logger(DEBUG)
else:
    log = get_logger()

if args.join:
    from desitarget.mock.build import join_targets_truth
    join_targets_truth(args.output_dir, nside=args.nside, verbose=args.verbose, clobber=args.clobber)
    sys.exit(1)

if args.qa:
    from desitarget.mock.QA import qa_targets_truth
    qa_targets_truth(args.output_dir, verbose=args.verbose, clobber=args.clobber)
    sys.exit(1)

if not os.path.exists(args.config):
    log.fatal('No configuration file {} found.'.format(args.config))
    raise Exception()

# Read parameters from yaml
log.info('Reading configuration file {}'.format(args.config))
with open(args.config, 'r') as pfile:
    params = yaml.load(pfile)

# Divide the DESI footprint into healpix pixels.
if args.nside < 2 or args.nside_outfiles < 2:
    log.fatal('NSIDE = {} and NSIDE_OUTFILES = {} must be >=2'.format(args.nside, args.nside_outfiles))
    raise Exception()

if args.healpixels:
    healpixels = args.healpixels
    log.info('Restricting footprint to input healpix pixels {}.  ** Please be sure these were computed with input nside = {}! **'.format(
        healpixels, args.nside))
else:
    healpixels = tiles2pix(args.nside)

# Optionally read the "real" target catalog.
if args.realtargets is not None:
    from astropy.io import fits
    print('Loading real targets from {}'.format(args.realtargets))
    realtargets = fits.getdata(args.realtargets, 1)
else:
    realtargets = None

# Construct Targets and Truth files
targets_truth(params, args.output_dir, realtargets=realtargets, seed=args.seed,
              verbose=args.verbose, nproc=args.nproc, bricksize=args.bricksize,
              nside_outfiles=args.nside_outfiles, clobber=args.clobber,
              healpixels=healpixels, nside=args.nside)

log.info('All done!')

