#!/usr/bin/env python

from __future__ import print_function, division

import os
import argparse
import yaml

import multiprocessing
nproc = multiprocessing.cpu_count() // 2

from desitarget.mock.build import targets_truth
from desispec.log import get_logger, DEBUG

parser = argparse.ArgumentParser()
parser.add_argument('--config', '-c',default='input.yaml')
parser.add_argument('--output_dir', '-O', help='Path to write the outputs', type=str, default='./')
parser.add_argument('--realtargets', '-r', help='Path to real target catalog', type=str)
parser.add_argument('--seed', '-s', help='Seed for random number generation', type=int, default=None)
parser.add_argument('--nproc', type=int, help='number of concurrent processes to use [{}]'.format(nproc), default=nproc)

parser.add_argument('-v','--verbose', action='store_true', help='Enable verbose output.')
args = parser.parse_args()

if args.verbose:
    log = get_logger(DEBUG)
else:
    log = get_logger(DEBUG)

if not os.path.exists(args.config):
    log.fatal('No configuration file {} found.'.format(args.config))
    raise Exception()

# Read parameters from yaml
log.info('Reading configuration file {}'.format(args.config))
with open(args.config, 'r') as pfile:
    params = yaml.load(pfile)

# Optionally read the "real" target catalog.
if args.realtargets is not None:
    from astropy.io import fits
    print('Loading real targets from {}'.format(args.realtargets))
    realtargets = fits.getdata(args.realtargets)
else:
    realtargets = None

# Construct Targets and Truth files
targets_truth(params, args.output_dir, realtargets=realtargets,
              seed=args.seed, nproc=args.nproc, verbose=args.verbose)

log.info('All done!')

