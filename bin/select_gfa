#!/usr/bin/env python

import desimodel.focalplane
import desitarget.io
import fitsio
import numpy as np
import desimodel.io
import desimodel.footprint
import matplotlib.pyplot as plt
import glob
import time
import os.path
import argparse

def near_tile(data, tilera, tiledec, window_ra=4.0, window_dec=4.0):
    delta_RA = data['RA'] - tilera
    delta_dec = data['DEC'] - tiledec
    jj = np.fabs(delta_RA) < window_ra
    jj = jj | ((delta_RA + 360.0) < window_ra)
    jj = jj | ((360.0 - delta_RA) < window_ra)
    jj = jj & (np.fabs(delta_dec)<window_dec)
    return jj

parser = argparse.ArgumentParser()

parser.add_argument('-o', '--output_dir', help='Path to write the outputs', type=str)
parser.add_argument('-s', '--input_sweep', help='Path to the sweep files', type=str)
parser.add_argument('-f', '--input_fiberassign', help='Path to fiberassign output files', type=str)
parser.add_argument('-t', '--input_tiles', help='Input file with the tileid gfa files to be computed', type=str)

args = parser.parse_args()

# list tilefiles already available
if args.input_fiberassign:
    fiberassign_tilefiles = glob.glob(os.path.join(args.input_fiberassign,"tile*.fits"))
    print(len(fiberassign_tilefiles), 'fiberassign tile files')
else:
    fiberassign_tilefiles = []

# list sweep files to be used
sweep_files = desitarget.io.list_sweepfiles(args.input_sweep)
n_sweep = len(sweep_files)
print(len(sweep_files), 'sweep files')

# list of tiles to be computed
desi_tiles = desimodel.io.load_tiles()
if args.input_tiles is not None:
    gfa_tiles = np.int_(np.loadtxt(args.input_tiles))
    print(len(gfa_tiles), 'tiles to process')

    # Check that all of them are known DESI tiles
    unknown_tiles = ~np.in1d(gfa_tiles, desi_tiles['TILEID'])
    if np.any(unknown_tiles):
        nbad = np.count_nonzero(unknown_tiles)
        print('{} unknown tiles: {}'.format(nbad, gfa_tiles[unknown_tiles]))

    # Trim DESI tiles list to the requested subset
    ii = np.in1d(desi_tiles['TILEID'], gfa_tiles)
    desi_tiles = desi_tiles[ii]

#load all sweep data
sweep_data = []
# n_sweep = 10
for i in range(n_sweep):
    sweep_file = sweep_files[i]
    data = fitsio.read(sweep_file, columns=['RA', 'DEC', 'FLUX_R'])

    #- Keep just mag>18
    rfluxlim = 10**(0.4*(22.5-18))
    ii = data['FLUX_R'] > rfluxlim
    data = data[ii]

    #- Faster for a small number of test tiles, but slower if using all tiles
    # keep = np.zeros(len(data), dtype=bool)
    # for tile in desi_tiles:
    #     keep |= near_tile(data, tile['RA'], tile['DEC'])
    # if np.any(keep):
    #     sweep_data.append(data[keep])

    sweep_data.append(data)

    print('Loaded file {} out of {}'.format(i, n_sweep))

all_sweep = np.concatenate(sweep_data, axis=0)

print('There are {:.2f}M targets near tiles in the sweeps'.format(len(all_sweep)/1E6))

#find IDs of targets on every individual tile

for i in range(len(desi_tiles)):
    tile_id = desi_tiles['TILEID'][i]
    print('computing TILEID {:05d} on RA {:6.2f} DEC {:6.2f}'.format(tile_id, desi_tiles['RA'][i], desi_tiles['DEC'][i]))
    
    # select targets in a smaller window centered on tile
    jj = near_tile(all_sweep, desi_tiles['RA'][i], desi_tiles['DEC'][i])
    
    #find GFA targets in the smaller input window
    if np.count_nonzero(jj):
        mini_sweep = all_sweep[jj]
        print('Inside mini_sweep: {:.2f}M targets'.format(len(mini_sweep)/1E6))
        
        targetindices, gfaindices = desimodel.focalplane.on_tile_gfa(tile_id, mini_sweep)
        print('Found {:d} targets on TILEID {:05d}'.format(len(targetindices), tile_id))

        if len(targetindices):
            gfa_targets = np.lib.recfunctions.append_fields(
                    mini_sweep[targetindices], 'GFA_LOC', gfaindices,
                    usemask=False)

            filename = os.path.join(args.output_dir, "gfa_targets_tile_{:05d}.fits".format(tile_id))        
            print("writing to {}".format(filename))
            a = fitsio.write(filename, gfa_targets, extname='GFA', clobber=True)
            

#rewrite a new tilefile with all the info in three HDUs
gfa_files = glob.glob(os.path.join(args.output_dir, "gfa_targets_*.fits"))
gfa_tile_id = {}
for gfa_file in gfa_files:
    f = gfa_file.split('/')[-1]
    fileid = f.split("_")[-1]
    fileid = fileid[0:5]
    gfa_tile_id[fileid] = gfa_file
    
fa_tile_id = {}
for fa_file in fiberassign_tilefiles:
    f = fa_file.split('/')[-1]
    fileid = f.split("_")[-1]
    fileid = fileid[0:5]
    fa_tile_id[fileid] = fa_file
    
for gfa_id in gfa_tile_id.keys():
    if gfa_id in fa_tile_id.keys():
        print('rewriting tilefile for tileid {}'.format(gfa_id))
        gfa_data = fitsio.read(gfa_tile_id[gfa_id])
        fiber_data = fitsio.read(fa_tile_id[gfa_id], ext=1)
        potential_data = fitsio.read(fa_tile_id[gfa_id], ext=2)

        tileout = os.path.join(args.output_dir, 'tile_{}.fits'.format(gfa_id))
        fitsio.write(tileout, fiber_data, extname='FIBERASSIGN', clobber=True)
        fitsio.write(tileout, potential_data, extname='POTENTIAL')
        fitsio.write(tileout, gfa_data, extname='GFA')


