#!/usr/bin/env python

import numpy as np
import desimodel.io
import glob
import os.path
import argparse
import desitarget.gfa

from desiutil.log import get_logger
log = get_logger()

parser = argparse.ArgumentParser()

parser.add_argument('-o', '--output_dir', help='Path to write the outputs', type=str)
parser.add_argument('-s', '--input_sweep', help='Path to the sweep files', type=str)
parser.add_argument('-f', '--input_fiberassign', help='Path to fiberassign output files', type=str)
parser.add_argument('-t', '--input_tiles', help='Input file with the tileid gfa files to be computed', type=str)

args = parser.parse_args()

if not os.path.isdir(args.output_dir):
    os.makedirs(args.output_dir, exist_ok=True)

# list of tiles to be computed
desi_tiles = desimodel.io.load_tiles()
if args.input_tiles is not None:
    gfa_tiles = np.int_(np.loadtxt(args.input_tiles))
    log.info('{} tiles to process'.format(len(gfa_tiles)))

    # Check that all of them are known DESI tiles
    unknown_tiles = ~np.in1d(gfa_tiles, desi_tiles['TILEID'])
    if np.any(unknown_tiles):
        nbad = np.count_nonzero(unknown_tiles)
        log.info('{} unknown tiles: {}'.format(nbad, gfa_tiles[unknown_tiles]))

    # Trim DESI tiles list to the requested subset
    ii = np.in1d(desi_tiles['TILEID'], gfa_tiles)
    desi_tiles = desi_tiles[ii]

# Find and write GFA targets in desi_tiles 
desitarget.gfa.write_gfa_targets(args.input_sweep, desi_tiles, args.output_dir, log=log)

# Rewrite fiberassign tiles with the GFA info
desitarget.gfa.add_gfa_info_to_fa_tiles(gfa_file_path=args.output_dir, 
                                     fa_file_path=args.input_fiberassign, 
                                     output_path=args.output_dir, log=log)



